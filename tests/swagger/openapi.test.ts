import { load } from 'js-yaml';
import { readFileSync, existsSync } from 'fs';
import { join } from 'path';

describe('Generated OpenAPI Specification File', () => {
    let loadedYamlSpec: any;

    beforeAll(() => {
        // Define the path to the YAML file generated by 'npm run generate-openapi'
        const yamlPath = join(__dirname, '../../openapi/openapi.yaml');

        // Check if the file exists before trying to read it
        if (!existsSync(yamlPath)) {
            throw new Error(`Generated OpenAPI spec file not found at ${yamlPath}. Make sure 'npm run generate-openapi' ran successfully before 'jest'.`);
        }

        // Load the generated YAML file
        try {
            const yamlContent = readFileSync(yamlPath, 'utf8');
            loadedYamlSpec = load(yamlContent);
        } catch (error) {
            console.error(`Failed to load or parse generated YAML spec from ${yamlPath}.`);
            throw error;
        }

        // Ensure loading was successful
        if (!loadedYamlSpec) {
            throw new Error(`Loaded YAML spec from ${yamlPath} is null or undefined.`);
        }
    });

    // --- Test the content of the loaded YAML file ---

    it('should have basic OpenAPI structure', () => {
        expect(loadedYamlSpec).toHaveProperty('openapi');
        expect(loadedYamlSpec.openapi).toMatch(/^3\.[0-1]\.\d$/);
        expect(loadedYamlSpec).toHaveProperty('info');
        expect(loadedYamlSpec).toHaveProperty('paths');
        expect(loadedYamlSpec).toHaveProperty('components');
    });

    it('should have correct API information', () => {
        expect(loadedYamlSpec.info).toMatchObject({
            title: 'JSON-RPC CRUD API',
            version: '1.0.0'
        });
    });

    it('should have JSON-RPC endpoint defined under paths', () => {
        expect(loadedYamlSpec.paths).toHaveProperty('/jsonrpc');
        expect(loadedYamlSpec.paths['/jsonrpc']).toHaveProperty('post');
    });

    it('should have schemas generated for DTOs in the loaded file', () => {
        // Check the schemas from the LOADED YAML file
        expect(loadedYamlSpec.components).toHaveProperty('schemas');
        const schemas = loadedYamlSpec.components.schemas;

        // Base types
        expect(schemas).toHaveProperty('Item');
        expect(schemas).toHaveProperty('JsonRpcRequest');

        // Check for the specific request DTOs - these SHOULD be in the generated file
        expect(schemas).toHaveProperty('CreateItemRequest');
        expect(schemas.CreateItemRequest.properties).toHaveProperty('params');

        expect(schemas).toHaveProperty('ReadItemRequest');
        expect(schemas.ReadItemRequest.properties).toHaveProperty('params');

        expect(schemas).toHaveProperty('UpdateItemRequest');
        expect(schemas.UpdateItemRequest.properties).toHaveProperty('params');

        expect(schemas).toHaveProperty('DeleteItemRequest');
        expect(schemas.DeleteItemRequest.properties).toHaveProperty('params');

        // ListItemsRequest and DeleteAllItemsRequest should also be present
        // even if their params are empty objects, they are distinct classes.
        expect(schemas).toHaveProperty('ListItemsRequest');
        expect(schemas).toHaveProperty('DeleteAllItemsRequest');
    });

    it('should have requestBody defined for the post endpoint', () => {
        const postEndpoint = loadedYamlSpec.paths['/jsonrpc'].post;
        expect(postEndpoint).toHaveProperty('requestBody');
        expect(postEndpoint.requestBody.content).toHaveProperty('application/json');
        expect(postEndpoint.requestBody.content['application/json'].schema).toBeDefined();
    });
}); 